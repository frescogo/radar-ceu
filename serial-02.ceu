^["@/pico/pico.ceu"]

pico.state.set.grid(true)
pico.state.set.size.window([1510,810])

```:pre
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <termios.h>
#include <sys/ioctl.h>
```

func serial-init (fd) {
    ```
    {
        int fd = $fd.Number;
        int flags = fcntl(fd, F_GETFL, 0);
        int ok    = fcntl(fd, F_SETFL, flags|O_NONBLOCK);
        assert(ok == 0 && "serial error");
        struct termios options;
        tcgetattr(fd, &options);
        cfsetispeed(&options, B9600);
        cfsetospeed(&options, B9600);
        //options.c_cflag |= CS8;
        options.c_cflag |= CS8;
        options.c_cflag &= ~CRTSCTS;
        options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
        tcsetattr(fd, TCSANOW, &options);
        ioctl(fd, TCFLSH, 2);
    }
    ```
}

func serial-read (fd) {
    ```
    char c;
    int ret = read($fd.Number, &c, 1);
    //printf(">>> %d %d %d\n", ret, c, (int)$fd.Number);
    ```
    `:bool ret==1` and `:char c`
}

task Serial-Read (fd) {
    loop {
        until serial-read(fd)
        await(:Pico.Frame)
    }
}

enum { :esq, :dir }
enum { :inb, :out }
data :Radar = [port,dir,vel]

task Serial (port) {
    val dev = "/dev/ttyACM" ++ to.string(port);
    println(dev)
    loop {
        catch :timeout {
            val fd = loop {
                val c = to.pointer(dev)
                val x = `:number open($c.Pointer, O_RDONLY)`;
println(:fd, c, x, `:number errno`)
                until (x>=0) and x
                await <5:s>
            }
println(:ok, fd)

            serial-init(fd)
            defer {
                `assert(close($fd.Number) == 0);`
            }
            loop {
                par-or {
                    await <5:s>
                    error(:timeout)
                } with {
                    loop {
                        val c = await spawn Serial-Read(fd)
                        until c == `:char 0x88`
                    }
                    loop in {1 => 7} {
                        await spawn Serial-Read(fd)
                    }
                    val dir = (await spawn Serial-Read(fd)) thus {
                        val bit = `:number ($it.Char >> 1) & 0x01`
                        ((bit == 0) and :out) or :inb
                    }
                    val str = #[]
                    loop in {1 => 4} {
                        set str[+] = await spawn Serial-Read(fd)
                    }
                    val num = to.number(str) / 10 --> math.round
                    if num {
                        broadcast(:Radar [port,dir,num]) in :global
                    }
                }
            }
        }
    }
}

func pos-x (pos) {
    if pos == :esq
        => [-65, -30]
        => [ 65,  30]
}

func pos-arr (pos, dir) {
    match [pos,dir] {
        [:esq,:inb] => "<-"
        [:esq,:out] => "->"
        [:dir,:inb] => "->"
        [:dir,:out] => "<-"
    }
}

task Placar (port, pos) {
    set pub = pos
    var evt :Radar
    par {
        loop {
            par-or {
                await <500:ms>
                set evt = nil
            } with {
                await :Radar | it.port==port {
                    set evt = it
                }
            }
        }
    } with {
        every :Pico.Draw {
            val [a,b] = pos-x(pub)
            pico.state.set.font("tiny.ttf", 10)
            pico.output.draw.text([a,0], port->to.string)
            if evt == nil {
                pico.state.set.font("tiny.ttf", 30)
                pico.output.draw.text([b,0], "--")
            } else {
                pico.state.set.font("tiny.ttf", 30)
                pico.output.draw.text([b,0], evt.vel->to.string)

                val arr = pos-arr(pub, evt.dir)
                pico.state.set.font("tiny.ttf", 20)
                pico.output.draw.text([b,-20], arr)
            }
        }
    }
}

spawn {
    every :Radar {
        ;;println(it)
    }
}

spawn Serial(0)
spawn Serial(1)

val p0 = spawn Placar(0, :esq)
val p1 = spawn Placar(1, :dir)

spawn {
    loop {
        await(:Pico.Mouse.Button.Dn)
        set p0.pub = :dir
        set p1.pub = :esq
        await(:Pico.Mouse.Button.Dn)
        set p0.pub = :esq
        set p1.pub = :dir
    }
}

pico.loop()
